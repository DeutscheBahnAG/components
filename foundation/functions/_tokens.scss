@function dbx-token(
  $token-group,
  $token-name,
  $viewport: 'mobile',
  $tokens-map: $dbx-tokens
) {
  @if map-has-key($tokens-map, $token-group) {
    $token-group-map: map-get($tokens-map, $token-group);
    @if ($viewport != 'mobile') and
      map-has-key($token-group-map, '#{$token-name}.#{$viewport}') {
      @return map-get($token-group-map, '#{$token-name}.#{$viewport}');
    }
    @if map-has-key($token-group-map, $token-name) {
      @return map-get($token-group-map, $token-name);
    }
  }

  $error-message: 'The token `#{$token-group}.#{$token-name}` is not present in the DBX tokens map. Valid values are: (#{map-keys($tokens-map)})';
  @if (
    str-index($token-name, 'turquois') and not
    str-index($token-name, 'turquoise')
  ) {
    @error 'Did you misspell `turquoise`? #{$error-message}';
  } @else if (str-index($token-name, 'grey')) {
    @error 'Did you misspell `gray`? #{$error-message}';
  } @else {
    @error $error-message;
  }
}

@function dbx-palette-color($color, $tokens-map: $dbx-tokens) {
  @return dbx-token('palette', $token-name: $color, $tokens-map: $tokens-map);
}

@function dbx-color($color, $tokens-map: $dbx-tokens) {
  @return dbx-token('color', $token-name: $color, $tokens-map: $tokens-map);
}

@function dbx-background-color($color, $tokens-map: $dbx-tokens) {
  @return dbx-color('background.#{$color}', $tokens-map: $tokens-map);
}

@function dbx-text-color($color, $tokens-map: $dbx-tokens) {
  @return dbx-color('text.#{$color}', $tokens-map: $tokens-map);
}

@function dbx-border-color($color, $tokens-map: $dbx-tokens) {
  @return dbx-color('border.#{$color}', $tokens-map: $tokens-map);
}

@function dbx-border-width($component, $tokens-map: $dbx-tokens) {
  @return dbx-token(
    'bordersize',
    $token-name: $component,
    $tokens-map: $tokens-map
  );
}

@function dbx-font-family($family, $tokens-map: $dbx-tokens) {
  @return dbx-token(
    'fontfamily',
    $token-name: $family,
    $tokens-map: $tokens-map
  );
}

@function dbx-font-weight($family, $weight: null, $tokens-map: $dbx-tokens) {
  @return dbx-token(
    'fontweight',
    $token-name: if($weight == null, $family, '#{$family}.#{$weight}'),
    $tokens-map: $tokens-map
  );
}

@function dbx-font-size(
  $type,
  $size: 'm',
  $viewport: 'mobile',
  $tokens-map: $dbx-tokens
) {
  @return dbx-token(
    'textsize',
    $token-name: '#{$type}.#{$size}',
    $viewport: $viewport,
    $tokens-map: $tokens-map
  );
}

@function dbx-line-height(
  $type,
  $size: 'm',
  $viewport: 'mobile',
  $tokens-map: $dbx-tokens
) {
  @return dbx-token(
    'lineheight',
    $token-name: '#{$type}.#{$size}',
    $viewport: $viewport,
    $tokens-map: $tokens-map
  );
}

@function dbx-spacing($size, $negative: false, $tokens-map: $dbx-tokens) {
  $spacing: dbx-token('spacing', $token-name: $size, $tokens-map: $tokens-map);

  @if ($negative == true) {
    @return $spacing * -1;
  }

  @return $spacing;
}

@function dbx-size($size, $tokens-map: $dbx-tokens) {
  @return dbx-token('size', $token-name: $size, $tokens-map: $tokens-map);
}

@function dbx-border-radius($size, $tokens-map: $dbx-tokens) {
  @return dbx-token('radius', $token-name: $size, $tokens-map: $tokens-map);
}

@function dbx-icon-size($size, $tokens-map: $dbx-tokens) {
  @return dbx-token('icon', $token-name: $size, $tokens-map: $tokens-map);
}
