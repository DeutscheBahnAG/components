@use 'sass:math';

.db-textfield {
  @include db-focus-ring($focus-selector: ':focus-within', $transition: 'border 200ms');
  align-items: baseline;
  background-color: var(--db-secondary-background-color);
  border: db-border-width('input') solid var(--db-secondary-background-color);
  box-sizing: border-box;
  caret-color: var(--db-caret-color);
  color: var(--db-field-secondary-text-color);
  display: inline-flex;
  font-family: db-font-family('copy');
  vertical-align: baseline;

  @media (prefers-contrast: more) {
    border-color: var(--db-loud-border-color);
  }

  &:not(.db-textfield--disabled) {
    cursor: text;
  }

  /**
   * 1. Remove red shadow when validation fails (Firefox)
   */
  input,
  textarea {
    border: 0;
    background: transparent;
    box-shadow: none; /* 1 */
    color: var(--db-field-primary-text-color);
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    flex: 1;
    margin: 0;
    outline: 0;
    transition: color 0.2s;
    vertical-align: baseline;
    width: 100%;
  }

  input::-ms-clear {
    display: none;
  }

  ::placeholder {
    color: var(--db-field-secondary-text-color);
    font-family: inherit;
    font-size: inherit;
    font-style: italic;
    opacity: 0.5;
  }
}

.db-textfield--disabled,
.db-textfield--readonly {
  background: transparent;
  border-color: var(--db-primary-button-disabled-background-color);
}

.db-textfield--disabled {
  input,
  textarea {
    color: var(--db-disabled-text-color);
  }
}

.db-textfield--readonly {
  input,
  textarea {
    color: var(--db-primary-text-color);
    -webkit-text-fill-color: var(--db-primary-text-color); /* 2 */
  }
}

/**
 * 2. Fixes a Safari bug not applying colors via variables when disabled
 */
.db-textfield--disabled,
.db-textfield--readonly {
  color: var(--db-disabled-text-color);
  -webkit-text-fill-color: var(--db-disabled-text-color); /* 2 */
}

.db-textfield--textarea {
  overflow: hidden;
  position: relative;

  &::before,
  &::after {
    background: linear-gradient(to top, transparent);
    bottom: 0;
    content: '';
    height: db-spacing('s');
    pointer-events: none;
    position: absolute;
    z-index: 1;
  }

  &::before {
    top: 0;
    transform: rotate(180deg);
  }
}

.db-textfield-prefix,
.db-textfield-suffix {
  display: flex;
  transition: transform 0.2s;
  vertical-align: baseline;
  white-space: nowrap;
}

.db-textfield__inline-label {
  pointer-events: none;
  position: absolute;
  transition: transform 0.2s;
  transform-origin: 0 0;
  white-space: nowrap;
}

/**
  * 1. Calculating the scaling from M to S.
  * 2. Prefer `scale` over `font-size` for smooth transitions.
  */
.db-textfield:focus-within .db-textfield__inline-label,
.db-textfield--filled .db-textfield__inline-label {
  $scale-down: math.div(db-font-size('copy', 's'),
  db-font-size('copy', 'm')); /* 1 */
  transform: scale(#{$scale-down}) translateY(-12px); /* 2 */
}

.db-textfield--inline-label {
  ::placeholder {
    color: transparent;
    transition: color 0.4;
  }

  &:focus-within ::placeholder {
    color: var(--db-field-secondary-text-color);
  }

  input,
  &.db-textfield--filled .db-textfield-prefix,
  &.db-textfield--filled .db-textfield-suffix,
  &:focus-within .db-textfield-prefix,
  &:focus-within .db-textfield-suffix {
    transform: translateY(8px);
  }
}

@each $size in (xl l m s xs) {
  .db-textfield--size-#{$size} {
    $horizontal-padding: db-component-horizontal-padding($size, 'input');
    $vertical-padding: db-component-vertical-padding($size, 'input');

    @include db-component-text-style($size, 'input');

    border-radius: db-border-radius($size);
    min-height: db-size($size);

    input,
    textarea,
    .db-textfield-prefix {
      padding-left: $horizontal-padding;
    }

    input,
    textarea,
    .db-textfield-suffix {
      padding-right: $horizontal-padding;
    }

    /**
      * 1. Equals a Thin Space character
      * 2. X: Icons/Buttons should have equal margin to the border on all sides
      *    Z: Avoid sub-pixel placement (Safari + Retina)
      */
    .db-textfield-prefix {
      margin-right: #{3px - $horizontal-padding}; /* 1 */

      > * {
        display: flex; /* 2 */
        margin-right: 0.125em;
        transform: translateX(#{$vertical-padding - $horizontal-padding}) translateZ(0); /* 2 */
      }
    }

    .db-textfield-suffix {
      margin-left: #{3px - $horizontal-padding}; /* 1 */

      > * {
        display: flex; /* 2 */
        margin-right: 0.125em;
        transform: translateX(#{$horizontal-padding - $vertical-padding}) translateZ(0); /* 2 */
      }
    }

    .db-textfield--textarea {
      &::before,
      &::after {
        left: $horizontal-padding;
        right: $horizontal-padding;
      }
    }

    .db-textfield__inline-label {
      margin-left: $horizontal-padding;
    }

    input,
    textarea,
    .db-textfield-prefix,
    .db-textfield-suffix,
    .db-textfield__inline-label {
      border-radius: db-border-radius($size);
      padding-bottom: $vertical-padding + 1px;
      padding-top: $vertical-padding - 1px;
    }
  }
}

/**
  * 3. Negative margins as Buttons are higher than the expected line-height
  *    The margin-bottom needs to be 1px more
  */
.db-textfield {
  @each $size in (xl l m s xs) {
    .db-button--size-#{$size} {
      margin: #{(db-line-height('copy', 'm') - db-size($size)) *
        0.5 +
        1px}
        #{(db-line-height('copy', 'm') - db-size($size)) *
        0.5}
        #{(db-line-height('copy', 'm') - db-size($size)) *
        0.5 -
        2px};
    }
  }
}

/**
  * The following code has very positive effects on aligning Textfields (and other
  * elements like Links and Textfields) to each other as well as text placed
  * to them. Without this code, even Textfields wouldn’t align to each other in
  * case some of them do have an icon while others don’t.
  */
.db-textfield,
.db-textfield-prefix,
.db-textfield-suffix {
  &::before {
    content: ' ';
    width: 0;
  }
}
