@function db-token($token-group, $token-name, $viewport: 'mobile', $tokens-map: $db-tokens) {
  @if map-has-key($tokens-map, $token-group) {
    $token-group-map: map-get($tokens-map, $token-group);
    @if ($viewport != 'mobile') and map-has-key($token-group-map, '#{$token-name}.#{$viewport}') {
      @return map-get($token-group-map, '#{$token-name}.#{$viewport}');
    }
    @if map-has-key($token-group-map, $token-name) {
      @return map-get($token-group-map, $token-name);
    }
  }

  $error-message: 'The token `#{$token-group}.#{$token-name}` is not present in the DB tokens map. Valid values are: (#{map-keys($tokens-map)})';
  @if (str-index($token-name, 'turquois') and not str-index($token-name, 'turquoise')) {
    @error 'Did you misspell `turquoise`? #{$error-message}';
  } @else if (str-index($token-name, 'grey')) {
    @error 'Did you misspell `gray`? #{$error-message}';
  } @else {
    @error $error-message;
  }
}

@function db-palette-color($color, $tokens-map: $db-tokens) {
  @if map-has-key($tokens-map, 'palette') {
    $token-group-map: map-get($tokens-map, 'palette');
    @if map-has-key($token-group-map, $color) {
      @return map-get($token-group-map, $color);
    }

    $digits: (
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
    );

    $name: str-slice($color, 0, -4);
    $number: map-get($digits, str-slice($color, -1, -1)) +
      10 *
      map-get($digits, str-slice($color, -2, -2)) +
      100 *
      map-get($digits, str-slice($color, -3, -3));
    $lower-number: floor($number * 0.01) * 100;
    $upper-number: ceil($number * 0.01) * 100;
    $lower-color: db-palette-color($name + $lower-number);
    $upper-color: db-palette-color($name + $upper-number);
    @return mix($upper-color, $lower-color, percentage(($number - $lower-number) * 0.01));

    $error-message: 'The token `#{$token-group}.#{$token-name}` is not present in the DB tokens map. Valid values are: (#{map-keys($tokens-map)})';
    @error $error-message;
  }
}

@function db-border-width($component, $tokens-map: $db-tokens) {
  @return db-token('bordersize', $token-name: $component, $tokens-map: $tokens-map);
}

@function db-font-family($family, $tokens-map: $db-tokens) {
  @return db-token('fontfamily', $token-name: $family, $tokens-map: $tokens-map), $db-font-stack;
}

@function db-font-weight($family, $weight: null, $tokens-map: $db-tokens) {
  @return db-token(
    'fontweight',
    $token-name: if($weight == null, $family, '#{$family}.#{$weight}'),
    $tokens-map: $tokens-map
  );
}

@function db-font-size($type, $size: 'm', $viewport: 'mobile', $tokens-map: $db-tokens) {
  @return db-token(
    'textsize',
    $token-name: '#{$type}.#{$size}',
    $viewport: $viewport,
    $tokens-map: $tokens-map
  );
}

@function db-line-height($type, $size: 'm', $viewport: 'mobile', $tokens-map: $db-tokens) {
  @return db-token(
    'lineheight',
    $token-name: '#{$type}.#{$size}',
    $viewport: $viewport,
    $tokens-map: $tokens-map
  );
}

@function db-spacing($size, $negative: false, $tokens-map: $db-tokens) {
  $spacing: db-token('spacing', $token-name: $size, $tokens-map: $tokens-map);

  @if ($negative == true) {
    @return $spacing * -1;
  }

  @return $spacing;
}

@function db-size($size, $tokens-map: $db-tokens) {
  @return db-token('size', $token-name: $size, $tokens-map: $tokens-map);
}

@function db-border-radius($size, $tokens-map: $db-tokens) {
  @return db-token('radius', $token-name: $size, $tokens-map: $tokens-map);
}

@function db-icon-size($size, $tokens-map: $db-tokens) {
  @return db-token('icon', $token-name: $size, $tokens-map: $tokens-map);
}
